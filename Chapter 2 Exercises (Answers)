Chapter 2: Writing Simple Programs

Review Questions (Answers)
---------------------------
True/False
1. False
2. True
3. False
4. True
5. False
6. True
7. True
8. False
9. True
10. False




Multiple Choice (Answers)
--------------------------
1. (c)
2. (a)
3. (d)
4. (c)
5. (b)
6. (b)
7. (b)
8. (d)
9. (a)
10. (d)




Discussion (Answers)
---------------------
1)
1. **Specification:**
   - This step involves defining what the software needs to do. 
     It includes gathering requirements from stakeholders, understanding the problem that needs to be solved, and documenting the software’s functionality, constraints, and objectives. 
     The goal is to have a clear and detailed description of what the software will accomplish.

2. **Design:**
   - In this phase, the overall architecture and design of the software are planned. 
     This includes determining how the software will be structured, choosing the appropriate technologies, designing the user interface, and planning how different components will interact with each other.
     Detailed design specifications are created to guide the implementation.

3. **Implementation (Coding):**
   - This is where the actual coding of the software takes place.
     Developers write the code according to the design specifications.
     This phase involves selecting the appropriate programming languages, writing code, and developing the algorithms and data structures needed to solve the problem.
     The focus is on transforming the design into a functional software product.

4. **Testing/Debugging:**
   - Once the software is implemented, it needs to be tested to ensure it works correctly.
     This involves running the software with various inputs to check for errors, bugs, and defects.
     Testing can be done manually or through automated testing tools.
     Debugging is the process of identifying, isolating, and fixing any issues that are found during testing.

5. **Deployment:**
   - After the software has been thoroughly tested and debugged, it is ready to be deployed to the end users.
     This phase involves installing the software in the production environment, configuring it as necessary, and ensuring that it integrates smoothly with existing systems.
     Deployment also includes preparing any necessary documentation and training materials for users.

6. **Maintenance:**
   - Once the software is deployed, it enters the maintenance phase.
     This involves monitoring the software for any issues that arise, fixing bugs, making updates, and adding new features as needed.
     Maintenance ensures that the software continues to meet user needs and remains functional and up-to-date over time.
     Regular maintenance helps to prolong the software’s lifecycle and improve its performance.



2)
Identifiers:
'main'
'print'
'x'
'eval'
'input'
'i'
'range'


Expressions:
'"This program illustrates a chaotic function"'
'eval(input("Enter a number between 0 and 1: "))'
'3.9 * x * (1 - x)'
'x'


# File: chaos.py
# A simple program illustrating chaotic behavior.

def main():  # function definition
    print("This program illustrates a chaotic function")  # output statement with an expression
    x = eval(input("Enter a number between 0 and 1: "))  # input and assignment statement with expression
    for i in range(10):  # loop statement
        x = 3.9 * x * (1 - x)  # assignment statement with an expression
        print(x)  # output statement with an expression

main()  # function call



3)
Definite Loop: Runs a known number of times.
For Loop: A loop that iterates over a sequence, often used to create definite loops.
Counted Loop: A type of definite loop where iterations are controlled by counting, typically implemented using a for loop in Python.



4a)
Output:
0
1
4
9
16


4b)
Output:
3 1 4 1 5 


4c)
Output:
Hello
Hello
Hello
Hello


4d)
0 1
1 2
2 4
3 8
4 16



5)
1. Clarifies Thinking and Logic:
    Focus on Logic: Pseudocode allows you to focus on the logic and structure of the algorithm without getting bogged down by the syntax of a specific programming language.
    Simplifies Complexity: It helps in breaking down a complex problem into smaller, manageable steps, making it easier to understand and solve.


2. Language-Independent Planning:
    Universal Representation: Pseudocode is not tied to any particular programming language, making it easier to communicate ideas and algorithms with others, regardless of their preferred coding language.
    Flexibility: You can design your algorithm in pseudocode and later implement it in any programming language of your choice.


3. Reduces Syntax Errors:
    Fewer Syntax Issues: By focusing on the logic first, you minimize the risk of syntax errors that can occur if you jump straight into coding.
    Clearer Translation: Once the pseudocode is written, translating it into Python (or any other language) becomes a more straightforward task, reducing the likelihood of errors.


4. Improves Code Structure:
    Organized Code: Pseudocode helps in organizing your thoughts and planning the structure of your code. This often leads to writing cleaner, more organized, and maintainable code.
    Easier Modifications: It is easier to modify and refine the pseudocode than to rewrite a portion of the actual code, saving time and effort during the development process.


5. Effective Problem Solving:
    Problem Analysis: Writing pseudocode encourages thorough analysis of the problem, ensuring that you have considered all aspects and edge cases before implementation.
    Step-by-Step Solution: It provides a step-by-step solution to the problem, making it easier to track and debug the algorithm if something goes wrong during coding.


6. Facilitates Collaboration:
    Team Communication: In team environments, pseudocode is a great way to communicate the algorithm's approach and logic to other team members who may later implement or review the code.
    Documentation: Pseudocode can serve as part of the project documentation, helping new team members understand the logic behind the code quickly



6) The sep parameter in the Python print function specifies the separator to be used when they are printed.
   By default, the separator is a space (' '), but you can change it to any string you like.



7) The for loop does not run any iterations because range(0) produces an empty sequence. Therefore, "Hello" is never printed, and the output consists only of "start" followed by "end". This behavior aligns with the flowchart for the for statement, where the loop body is skipped if the range has no elements.




Programming Exercises (Answers)
--------------------------------
1)
# convert.py
# A program to convert Celsius temps to Fahrenheit
# by: Susan Computewell

def main():
    # Introduction
    print("This program converts temperatures from Celsius to Fahrenheit.")
    
    # Input
    celsius = eval(input("What is the Celsius temperature? "))
    
    # Conversion
    fahrenheit = 9 / 5 * celsius + 32
    
    # Output
    print("The temperature is", fahrenheit, "degrees Fahrenheit.")

# Run the main function
main()



2)
# convert.py
# A program to convert Celsius temps to Fahrenheit
# by: Susan Computewell

def main():
    # Introduction
    print("This program converts temperatures from Celsius to Fahrenheit.")
    
    # Input
    celsius = eval(input("What is the Celsius temperature? "))
    
    # Conversion
    fahrenheit = 9 / 5 * celsius + 32
    
    # Output
    print("The temperature is", fahrenheit, "degrees Fahrenheit.")
    
    # Pause to allow user to read the result
    input("Press the <Enter> key to quit.")

# Run the main function
main()



3)
# avg3.py
# A simple program to average three exam scores
# Illustrates use of multiple input
def main():
    print("This program computes the average of three exam scores.")
    
    # Prompt user to enter three scores separated by commas
    score1, score2, score3 = eval(input("Enter three scores separated by commas: "))
    
    # Calculate the average of the three scores
    average = (score1 + score2 + score3) / 3
    
    # Output the average score
    print("The average of the scores is:", average)

# Run the main function
main()



4)
# convert.py
# A program to convert Celsius temps to Fahrenheit
# by: Susan Computewell

def main():
    # Introduction
    print("This program converts temperatures from Celsius to Fahrenheit.")
    
    # Loop to execute 5 times
    for i in range(5):
        # Input
        celsius = eval(input("What is the Celsius temperature? "))
        
        # Conversion
        fahrenheit = 9 / 5 * celsius + 32
        
        # Output
        print("The temperature is", fahrenheit, "degrees Fahrenheit.")
    
    # Pause to allow user to read the result before the program exits
    input("Press the <Enter> key to quit.")

# Run the main function
main()



5)
# convert.py
# A program to compute and print a table of Celsius temperatures and their Fahrenheit equivalents
# every 10 degrees from 0°C to 100°C

def main():
    print("Celsius    Fahrenheit")
    print("---------------------")

    # Loop to compute and print the table of temperatures
    for celsius in range(0, 101, 10):
        fahrenheit = 9 / 5 * celsius + 32
        print("{:7}°C   {:10.2f}°F".format(celsius, fahrenheit))

# Run the main function
main()



6)
# futval.py
# A program to compute the value of an investment
# carried a user-specified number of years into the future

def main():
    print("This program calculates the future value of an investment.")
    
    # Prompt user for initial principal, annual interest rate, and number of years
    principal = eval(input("Enter the initial principal: "))
    apr = eval(input("Enter the annual interest rate: "))
    years = eval(input("Enter the number of years for the investment: "))
    
    # Calculate future value for the specified number of years
    for i in range(years):
        principal = principal * (1 + apr)
    
    # Display the future value after the specified number of years
    print("The value in", years, "years is:", principal)

# Run the main function
main()



7)
# futval.py
# A program to compute the total accumulation of an investment
# where a fixed amount is invested every year

def main():
    print("This program calculates the total accumulation of an investment.")
    
    # Prompt user for amount to invest each year, annual interest rate, and number of years
    annual_investment = eval(input("Enter the amount to invest each year: "))
    apr = eval(input("Enter the annual interest rate: "))
    years = eval(input("Enter the number of years for the investment: "))
    
    # Initialize the total accumulation
    total_accumulation = 0
    
    # Calculate total accumulation for the specified number of years
    for i in range(years):
        total_accumulation += annual_investment
        total_accumulation *= (1 + apr)
    
    # Display the total accumulation after the specified number of years
    print("The total accumulation after", years, "years is:", total_accumulation)

# Run the main function
main()



8)
# futval.py
# A program to compute the value of an investment
# with interest compounded periodically

def main():
    print("This program calculates the future value of an investment.")
    
    # Prompt user for nominal interest rate and number of compounding periods per year
    rate = eval(input("Enter the nominal interest rate (as a decimal): "))
    periods = eval(input("Enter the number of compounding periods per year: "))
    
    # Prompt user for initial principal
    principal = eval(input("Enter the initial principal: "))
    
    # Calculate future value with interest compounded periodically
    for i in range(10 * periods):
        principal *= (1 + rate / periods)
    
    # Display the future value
    print("The future value in 10 years is:", principal)

# Run the main function
main()



9)
def main():
    print("Fahrenheit to Celsius Converter")
    print("------------------------------")
    
    # Prompt user for temperature in Fahrenheit
    fahrenheit = float(input("Enter temperature in Fahrenheit: "))
    
    # Convert Fahrenheit to Celsius
    celsius = (fahrenheit - 32) * 5 / 9
    
    # Display the result
    print("Temperature in Celsius:", celsius, "°C")

# Run the main function
main()



10)
def main():
    print("Kilometers to Miles Converter")
    print("------------------------------")
    
    # Prompt user for distance in kilometers
    kilometers = float(input("Enter distance in kilometers: "))
    
    # Convert kilometers to miles
    miles = kilometers * 0.621371
    
    # Display the result
    print("Distance in Miles:", miles, "miles")

# Run the main function
main()



11)
def main():
    print("Kilograms to Pounds Converter")
    print("------------------------------")
    print("This program converts weights from kilograms to pounds.")
    print()
    
    # Prompt user for weight in kilograms
    kilograms = float(input("Enter weight in kilograms: "))
    
    # Convert kilograms to pounds
    pounds = kilograms * 2.20462
    
    # Display the result
    print("Weight in Pounds:", pounds, "pounds")

# Run the main function
main()



12)
def main():
    print("Welcome to Simple Python Calculator!")
    print("Type a mathematical expression or 'quit' to exit.")

    for i in range(100):
        expression = input("Enter a mathematical expression: ")
        result = eval(expression)
        print("Result:", result)

# Run the main function
main()

